// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: aggregator_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllAggregatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ShipperId string `protobuf:"bytes,4,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetAllAggregatorsRequest) Reset() {
	*x = GetAllAggregatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregator_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAggregatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAggregatorsRequest) ProtoMessage() {}

func (x *GetAllAggregatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregator_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAggregatorsRequest.ProtoReflect.Descriptor instead.
func (*GetAllAggregatorsRequest) Descriptor() ([]byte, []int) {
	return file_aggregator_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllAggregatorsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllAggregatorsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllAggregatorsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllAggregatorsRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

var File_aggregator_service_proto protoreflect.FileDescriptor

var file_aggregator_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x32, 0xcf, 0x02, 0x0a,
	0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x22, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x17,
	0x5a, 0x15, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aggregator_service_proto_rawDescOnce sync.Once
	file_aggregator_service_proto_rawDescData = file_aggregator_service_proto_rawDesc
)

func file_aggregator_service_proto_rawDescGZIP() []byte {
	file_aggregator_service_proto_rawDescOnce.Do(func() {
		file_aggregator_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_aggregator_service_proto_rawDescData)
	})
	return file_aggregator_service_proto_rawDescData
}

var file_aggregator_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aggregator_service_proto_goTypes = []interface{}{
	(*GetAllAggregatorsRequest)(nil),  // 0: genproto.GetAllAggregatorsRequest
	(*Aggregator)(nil),                // 1: genproto.Aggregator
	(*AggregatorId)(nil),              // 2: genproto.AggregatorId
	(*GetAllAggregatorsResponse)(nil), // 3: genproto.GetAllAggregatorsResponse
	(*empty.Empty)(nil),               // 4: google.protobuf.Empty
}
var file_aggregator_service_proto_depIdxs = []int32{
	1, // 0: genproto.AggregatorService.Create:input_type -> genproto.Aggregator
	2, // 1: genproto.AggregatorService.Get:input_type -> genproto.AggregatorId
	0, // 2: genproto.AggregatorService.GetAll:input_type -> genproto.GetAllAggregatorsRequest
	1, // 3: genproto.AggregatorService.Update:input_type -> genproto.Aggregator
	2, // 4: genproto.AggregatorService.Delete:input_type -> genproto.AggregatorId
	2, // 5: genproto.AggregatorService.Create:output_type -> genproto.AggregatorId
	1, // 6: genproto.AggregatorService.Get:output_type -> genproto.Aggregator
	3, // 7: genproto.AggregatorService.GetAll:output_type -> genproto.GetAllAggregatorsResponse
	4, // 8: genproto.AggregatorService.Update:output_type -> google.protobuf.Empty
	4, // 9: genproto.AggregatorService.Delete:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aggregator_service_proto_init() }
func file_aggregator_service_proto_init() {
	if File_aggregator_service_proto != nil {
		return
	}
	file_aggregator_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aggregator_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAggregatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aggregator_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aggregator_service_proto_goTypes,
		DependencyIndexes: file_aggregator_service_proto_depIdxs,
		MessageInfos:      file_aggregator_service_proto_msgTypes,
	}.Build()
	File_aggregator_service_proto = out.File
	file_aggregator_service_proto_rawDesc = nil
	file_aggregator_service_proto_goTypes = nil
	file_aggregator_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AggregatorServiceClient is the client API for AggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatorServiceClient interface {
	Create(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*AggregatorId, error)
	Get(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*Aggregator, error)
	GetAll(ctx context.Context, in *GetAllAggregatorsRequest, opts ...grpc.CallOption) (*GetAllAggregatorsResponse, error)
	Update(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorServiceClient(cc grpc.ClientConnInterface) AggregatorServiceClient {
	return &aggregatorServiceClient{cc}
}

func (c *aggregatorServiceClient) Create(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*AggregatorId, error) {
	out := new(AggregatorId)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Get(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*Aggregator, error) {
	out := new(Aggregator)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) GetAll(ctx context.Context, in *GetAllAggregatorsRequest, opts ...grpc.CallOption) (*GetAllAggregatorsResponse, error) {
	out := new(GetAllAggregatorsResponse)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Update(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Delete(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServiceServer is the server API for AggregatorService service.
type AggregatorServiceServer interface {
	Create(context.Context, *Aggregator) (*AggregatorId, error)
	Get(context.Context, *AggregatorId) (*Aggregator, error)
	GetAll(context.Context, *GetAllAggregatorsRequest) (*GetAllAggregatorsResponse, error)
	Update(context.Context, *Aggregator) (*empty.Empty, error)
	Delete(context.Context, *AggregatorId) (*empty.Empty, error)
}

// UnimplementedAggregatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAggregatorServiceServer struct {
}

func (*UnimplementedAggregatorServiceServer) Create(context.Context, *Aggregator) (*AggregatorId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAggregatorServiceServer) Get(context.Context, *AggregatorId) (*Aggregator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAggregatorServiceServer) GetAll(context.Context, *GetAllAggregatorsRequest) (*GetAllAggregatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedAggregatorServiceServer) Update(context.Context, *Aggregator) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAggregatorServiceServer) Delete(context.Context, *AggregatorId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAggregatorServiceServer(s *grpc.Server, srv AggregatorServiceServer) {
	s.RegisterService(&_AggregatorService_serviceDesc, srv)
}

func _AggregatorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Create(ctx, req.(*Aggregator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Get(ctx, req.(*AggregatorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAggregatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).GetAll(ctx, req.(*GetAllAggregatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Update(ctx, req.(*Aggregator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Delete(ctx, req.(*AggregatorId))
	}
	return interceptor(ctx, in, info, handler)
}

var _AggregatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.AggregatorService",
	HandlerType: (*AggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AggregatorService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AggregatorService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AggregatorService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AggregatorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AggregatorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator_service.proto",
}
