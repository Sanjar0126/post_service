// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: orde_report_service.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_orde_report_service_proto protoreflect.FileDescriptor

var file_orde_report_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x96,
	0x04, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_orde_report_service_proto_goTypes = []interface{}{
	(*MainReportRequest)(nil),             // 0: genproto.MainReportRequest
	(*CourierReportRequest)(nil),          // 1: genproto.CourierReportRequest
	(*OrdersRequest)(nil),                 // 2: genproto.OrdersRequest
	(*MainReportResponse)(nil),            // 3: genproto.MainReportResponse
	(*CourierReportRespose)(nil),          // 4: genproto.CourierReportRespose
	(*BranchReportResponse)(nil),          // 5: genproto.BranchReportResponse
	(*OrderReportResponse)(nil),           // 6: genproto.OrderReportResponse
	(*BranchOrderTimeReportResponse)(nil), // 7: genproto.BranchOrderTimeReportResponse
	(*ClientOrderReportResponse)(nil),     // 8: genproto.ClientOrderReportResponse
}
var file_orde_report_service_proto_depIdxs = []int32{
	0, // 0: genproto.OrderReportService.GetMainReport:input_type -> genproto.MainReportRequest
	1, // 1: genproto.OrderReportService.GetCourierReport:input_type -> genproto.CourierReportRequest
	0, // 2: genproto.OrderReportService.GetBranchReport:input_type -> genproto.MainReportRequest
	2, // 3: genproto.OrderReportService.GetOrderReport:input_type -> genproto.OrdersRequest
	0, // 4: genproto.OrderReportService.GetBranchOrderTimeReport:input_type -> genproto.MainReportRequest
	0, // 5: genproto.OrderReportService.GetClientOrderReport:input_type -> genproto.MainReportRequest
	3, // 6: genproto.OrderReportService.GetMainReport:output_type -> genproto.MainReportResponse
	4, // 7: genproto.OrderReportService.GetCourierReport:output_type -> genproto.CourierReportRespose
	5, // 8: genproto.OrderReportService.GetBranchReport:output_type -> genproto.BranchReportResponse
	6, // 9: genproto.OrderReportService.GetOrderReport:output_type -> genproto.OrderReportResponse
	7, // 10: genproto.OrderReportService.GetBranchOrderTimeReport:output_type -> genproto.BranchOrderTimeReportResponse
	8, // 11: genproto.OrderReportService.GetClientOrderReport:output_type -> genproto.ClientOrderReportResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_orde_report_service_proto_init() }
func file_orde_report_service_proto_init() {
	if File_orde_report_service_proto != nil {
		return
	}
	file_order_report_proto_init()
	file_order_service_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orde_report_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orde_report_service_proto_goTypes,
		DependencyIndexes: file_orde_report_service_proto_depIdxs,
	}.Build()
	File_orde_report_service_proto = out.File
	file_orde_report_service_proto_rawDesc = nil
	file_orde_report_service_proto_goTypes = nil
	file_orde_report_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderReportServiceClient is the client API for OrderReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderReportServiceClient interface {
	GetMainReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*MainReportResponse, error)
	GetCourierReport(ctx context.Context, in *CourierReportRequest, opts ...grpc.CallOption) (*CourierReportRespose, error)
	GetBranchReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*BranchReportResponse, error)
	GetOrderReport(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrderReportResponse, error)
	GetBranchOrderTimeReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*BranchOrderTimeReportResponse, error)
	GetClientOrderReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*ClientOrderReportResponse, error)
}

type orderReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReportServiceClient(cc grpc.ClientConnInterface) OrderReportServiceClient {
	return &orderReportServiceClient{cc}
}

func (c *orderReportServiceClient) GetMainReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*MainReportResponse, error) {
	out := new(MainReportResponse)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetMainReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReportServiceClient) GetCourierReport(ctx context.Context, in *CourierReportRequest, opts ...grpc.CallOption) (*CourierReportRespose, error) {
	out := new(CourierReportRespose)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetCourierReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReportServiceClient) GetBranchReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*BranchReportResponse, error) {
	out := new(BranchReportResponse)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetBranchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReportServiceClient) GetOrderReport(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrderReportResponse, error) {
	out := new(OrderReportResponse)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetOrderReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReportServiceClient) GetBranchOrderTimeReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*BranchOrderTimeReportResponse, error) {
	out := new(BranchOrderTimeReportResponse)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetBranchOrderTimeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReportServiceClient) GetClientOrderReport(ctx context.Context, in *MainReportRequest, opts ...grpc.CallOption) (*ClientOrderReportResponse, error) {
	out := new(ClientOrderReportResponse)
	err := c.cc.Invoke(ctx, "/genproto.OrderReportService/GetClientOrderReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReportServiceServer is the server API for OrderReportService service.
type OrderReportServiceServer interface {
	GetMainReport(context.Context, *MainReportRequest) (*MainReportResponse, error)
	GetCourierReport(context.Context, *CourierReportRequest) (*CourierReportRespose, error)
	GetBranchReport(context.Context, *MainReportRequest) (*BranchReportResponse, error)
	GetOrderReport(context.Context, *OrdersRequest) (*OrderReportResponse, error)
	GetBranchOrderTimeReport(context.Context, *MainReportRequest) (*BranchOrderTimeReportResponse, error)
	GetClientOrderReport(context.Context, *MainReportRequest) (*ClientOrderReportResponse, error)
}

// UnimplementedOrderReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderReportServiceServer struct {
}

func (*UnimplementedOrderReportServiceServer) GetMainReport(context.Context, *MainReportRequest) (*MainReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainReport not implemented")
}
func (*UnimplementedOrderReportServiceServer) GetCourierReport(context.Context, *CourierReportRequest) (*CourierReportRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierReport not implemented")
}
func (*UnimplementedOrderReportServiceServer) GetBranchReport(context.Context, *MainReportRequest) (*BranchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchReport not implemented")
}
func (*UnimplementedOrderReportServiceServer) GetOrderReport(context.Context, *OrdersRequest) (*OrderReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderReport not implemented")
}
func (*UnimplementedOrderReportServiceServer) GetBranchOrderTimeReport(context.Context, *MainReportRequest) (*BranchOrderTimeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchOrderTimeReport not implemented")
}
func (*UnimplementedOrderReportServiceServer) GetClientOrderReport(context.Context, *MainReportRequest) (*ClientOrderReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientOrderReport not implemented")
}

func RegisterOrderReportServiceServer(s *grpc.Server, srv OrderReportServiceServer) {
	s.RegisterService(&_OrderReportService_serviceDesc, srv)
}

func _OrderReportService_GetMainReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetMainReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetMainReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetMainReport(ctx, req.(*MainReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReportService_GetCourierReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetCourierReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetCourierReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetCourierReport(ctx, req.(*CourierReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReportService_GetBranchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetBranchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetBranchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetBranchReport(ctx, req.(*MainReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReportService_GetOrderReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetOrderReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetOrderReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetOrderReport(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReportService_GetBranchOrderTimeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetBranchOrderTimeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetBranchOrderTimeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetBranchOrderTimeReport(ctx, req.(*MainReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReportService_GetClientOrderReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReportServiceServer).GetClientOrderReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.OrderReportService/GetClientOrderReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReportServiceServer).GetClientOrderReport(ctx, req.(*MainReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.OrderReportService",
	HandlerType: (*OrderReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMainReport",
			Handler:    _OrderReportService_GetMainReport_Handler,
		},
		{
			MethodName: "GetCourierReport",
			Handler:    _OrderReportService_GetCourierReport_Handler,
		},
		{
			MethodName: "GetBranchReport",
			Handler:    _OrderReportService_GetBranchReport_Handler,
		},
		{
			MethodName: "GetOrderReport",
			Handler:    _OrderReportService_GetOrderReport_Handler,
		},
		{
			MethodName: "GetBranchOrderTimeReport",
			Handler:    _OrderReportService_GetBranchOrderTimeReport_Handler,
		},
		{
			MethodName: "GetClientOrderReport",
			Handler:    _OrderReportService_GetClientOrderReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orde_report_service.proto",
}
