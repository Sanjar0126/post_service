// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: order_report.proto

package order_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MainReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate  string `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate    string `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	FromTime  string `protobuf:"bytes,3,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	ToTime    string `protobuf:"bytes,4,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	ShipperId string `protobuf:"bytes,5,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *MainReportRequest) Reset() {
	*x = MainReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainReportRequest) ProtoMessage() {}

func (x *MainReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainReportRequest.ProtoReflect.Descriptor instead.
func (*MainReportRequest) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{0}
}

func (x *MainReportRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *MainReportRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *MainReportRequest) GetFromTime() string {
	if x != nil {
		return x.FromTime
	}
	return ""
}

func (x *MainReportRequest) GetToTime() string {
	if x != nil {
		return x.ToTime
	}
	return ""
}

func (x *MainReportRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type MainReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date               string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Delivery           int64  `protobuf:"varint,2,opt,name=delivery,proto3" json:"delivery,omitempty"`
	SelfPickup         int64  `protobuf:"varint,3,opt,name=self_pickup,json=selfPickup,proto3" json:"self_pickup,omitempty"`
	Aggregators        int64  `protobuf:"varint,4,opt,name=aggregators,proto3" json:"aggregators,omitempty"`
	FreeDelivery       int64  `protobuf:"varint,5,opt,name=free_delivery,json=freeDelivery,proto3" json:"free_delivery,omitempty"`
	CanceledOrders     int64  `protobuf:"varint,6,opt,name=canceled_orders,json=canceledOrders,proto3" json:"canceled_orders,omitempty"`
	GivenCashback      int64  `protobuf:"varint,7,opt,name=given_cashback,json=givenCashback,proto3" json:"given_cashback,omitempty"`
	CanceledButSold    int64  `protobuf:"varint,8,opt,name=canceled_but_sold,json=canceledButSold,proto3" json:"canceled_but_sold,omitempty"`
	OrderCount         int64  `protobuf:"varint,9,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	TotalPrice         int64  `protobuf:"varint,10,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	ProductPrice       int64  `protobuf:"varint,11,opt,name=product_price,json=productPrice,proto3" json:"product_price,omitempty"`
	ReissuedOrderCount int64  `protobuf:"varint,12,opt,name=reissued_order_count,json=reissuedOrderCount,proto3" json:"reissued_order_count,omitempty"`
}

func (x *MainReport) Reset() {
	*x = MainReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainReport) ProtoMessage() {}

func (x *MainReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainReport.ProtoReflect.Descriptor instead.
func (*MainReport) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{1}
}

func (x *MainReport) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MainReport) GetDelivery() int64 {
	if x != nil {
		return x.Delivery
	}
	return 0
}

func (x *MainReport) GetSelfPickup() int64 {
	if x != nil {
		return x.SelfPickup
	}
	return 0
}

func (x *MainReport) GetAggregators() int64 {
	if x != nil {
		return x.Aggregators
	}
	return 0
}

func (x *MainReport) GetFreeDelivery() int64 {
	if x != nil {
		return x.FreeDelivery
	}
	return 0
}

func (x *MainReport) GetCanceledOrders() int64 {
	if x != nil {
		return x.CanceledOrders
	}
	return 0
}

func (x *MainReport) GetGivenCashback() int64 {
	if x != nil {
		return x.GivenCashback
	}
	return 0
}

func (x *MainReport) GetCanceledButSold() int64 {
	if x != nil {
		return x.CanceledButSold
	}
	return 0
}

func (x *MainReport) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *MainReport) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *MainReport) GetProductPrice() int64 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *MainReport) GetReissuedOrderCount() int64 {
	if x != nil {
		return x.ReissuedOrderCount
	}
	return 0
}

type MainReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*MainReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Count   int64         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MainReportResponse) Reset() {
	*x = MainReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainReportResponse) ProtoMessage() {}

func (x *MainReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainReportResponse.ProtoReflect.Descriptor instead.
func (*MainReportResponse) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{2}
}

func (x *MainReportResponse) GetReports() []*MainReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *MainReportResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CourierReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate  string `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	FromTime  string `protobuf:"bytes,2,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	ToTime    string `protobuf:"bytes,3,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	BranchId  string `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	ShipperId string `protobuf:"bytes,5,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	ToDate    string `protobuf:"bytes,6,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *CourierReportRequest) Reset() {
	*x = CourierReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierReportRequest) ProtoMessage() {}

func (x *CourierReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierReportRequest.ProtoReflect.Descriptor instead.
func (*CourierReportRequest) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{3}
}

func (x *CourierReportRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *CourierReportRequest) GetFromTime() string {
	if x != nil {
		return x.FromTime
	}
	return ""
}

func (x *CourierReportRequest) GetToTime() string {
	if x != nil {
		return x.ToTime
	}
	return ""
}

func (x *CourierReportRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *CourierReportRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *CourierReportRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

type CourierReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courier             *Courier `protobuf:"bytes,1,opt,name=courier,proto3" json:"courier,omitempty"`
	OrderCount          int64    `protobuf:"varint,2,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	MaxDistance         float32  `protobuf:"fixed32,3,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
	MinDistance         float32  `protobuf:"fixed32,4,opt,name=min_distance,json=minDistance,proto3" json:"min_distance,omitempty"`
	AvgDistance         float32  `protobuf:"fixed32,5,opt,name=avg_distance,json=avgDistance,proto3" json:"avg_distance,omitempty"`
	TotalDistance       float32  `protobuf:"fixed32,6,opt,name=total_distance,json=totalDistance,proto3" json:"total_distance,omitempty"`
	MaxTime             string   `protobuf:"bytes,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	MinTime             string   `protobuf:"bytes,8,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	AvgTime             string   `protobuf:"bytes,9,opt,name=avg_time,json=avgTime,proto3" json:"avg_time,omitempty"`
	TotalTime           string   `protobuf:"bytes,10,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	DeliveryPrice       int64    `protobuf:"varint,11,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	TotalPrice          int64    `protobuf:"varint,12,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	CanceledOrdersCount int64    `protobuf:"varint,13,opt,name=canceled_orders_count,json=canceledOrdersCount,proto3" json:"canceled_orders_count,omitempty"`
	CourierType         string   `protobuf:"bytes,14,opt,name=courier_type,json=courierType,proto3" json:"courier_type,omitempty"`
}

func (x *CourierReports) Reset() {
	*x = CourierReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierReports) ProtoMessage() {}

func (x *CourierReports) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierReports.ProtoReflect.Descriptor instead.
func (*CourierReports) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{4}
}

func (x *CourierReports) GetCourier() *Courier {
	if x != nil {
		return x.Courier
	}
	return nil
}

func (x *CourierReports) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *CourierReports) GetMaxDistance() float32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *CourierReports) GetMinDistance() float32 {
	if x != nil {
		return x.MinDistance
	}
	return 0
}

func (x *CourierReports) GetAvgDistance() float32 {
	if x != nil {
		return x.AvgDistance
	}
	return 0
}

func (x *CourierReports) GetTotalDistance() float32 {
	if x != nil {
		return x.TotalDistance
	}
	return 0
}

func (x *CourierReports) GetMaxTime() string {
	if x != nil {
		return x.MaxTime
	}
	return ""
}

func (x *CourierReports) GetMinTime() string {
	if x != nil {
		return x.MinTime
	}
	return ""
}

func (x *CourierReports) GetAvgTime() string {
	if x != nil {
		return x.AvgTime
	}
	return ""
}

func (x *CourierReports) GetTotalTime() string {
	if x != nil {
		return x.TotalTime
	}
	return ""
}

func (x *CourierReports) GetDeliveryPrice() int64 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *CourierReports) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *CourierReports) GetCanceledOrdersCount() int64 {
	if x != nil {
		return x.CanceledOrdersCount
	}
	return 0
}

func (x *CourierReports) GetCourierType() string {
	if x != nil {
		return x.CourierType
	}
	return ""
}

type CourierReportRespose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*CourierReports `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *CourierReportRespose) Reset() {
	*x = CourierReportRespose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierReportRespose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierReportRespose) ProtoMessage() {}

func (x *CourierReportRespose) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierReportRespose.ProtoReflect.Descriptor instead.
func (*CourierReportRespose) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{5}
}

func (x *CourierReportRespose) GetReports() []*CourierReports {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetBranchReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId              string  `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	BranchName            string  `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	AdminPanelOrdersCount int64   `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount        int64   `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount        int64   `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount    int64   `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	Aggregator            int64   `protobuf:"varint,7,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	TotalOrdersCount      int64   `protobuf:"varint,8,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	TotalSum              float32 `protobuf:"fixed32,9,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalDeliverySum      float32 `protobuf:"fixed32,10,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	CashSum               float32 `protobuf:"fixed32,11,opt,name=cash_sum,json=cashSum,proto3" json:"cash_sum,omitempty"`
	CashDeliverySum       float32 `protobuf:"fixed32,12,opt,name=cash_delivery_sum,json=cashDeliverySum,proto3" json:"cash_delivery_sum,omitempty"`
	PaymeSum              float32 `protobuf:"fixed32,13,opt,name=payme_sum,json=paymeSum,proto3" json:"payme_sum,omitempty"`
	PaymeDeliverySum      float32 `protobuf:"fixed32,14,opt,name=payme_delivery_sum,json=paymeDeliverySum,proto3" json:"payme_delivery_sum,omitempty"`
	TransferSum           float32 `protobuf:"fixed32,15,opt,name=transfer_sum,json=transferSum,proto3" json:"transfer_sum,omitempty"`
	TransferDeliverySum   float32 `protobuf:"fixed32,16,opt,name=transfer_delivery_sum,json=transferDeliverySum,proto3" json:"transfer_delivery_sum,omitempty"`
	ClickSum              float32 `protobuf:"fixed32,17,opt,name=click_sum,json=clickSum,proto3" json:"click_sum,omitempty"`
	ClickDeliverySum      float32 `protobuf:"fixed32,18,opt,name=click_delivery_sum,json=clickDeliverySum,proto3" json:"click_delivery_sum,omitempty"`
	AverageSum            float32 `protobuf:"fixed32,19,opt,name=average_sum,json=averageSum,proto3" json:"average_sum,omitempty"`
	FreeDelivery          float32 `protobuf:"fixed32,20,opt,name=free_delivery,json=freeDelivery,proto3" json:"free_delivery,omitempty"`
	GivenCashBack         float32 `protobuf:"fixed32,21,opt,name=given_cash_back,json=givenCashBack,proto3" json:"given_cash_back,omitempty"`
}

func (x *GetBranchReport) Reset() {
	*x = GetBranchReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchReport) ProtoMessage() {}

func (x *GetBranchReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchReport.ProtoReflect.Descriptor instead.
func (*GetBranchReport) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{6}
}

func (x *GetBranchReport) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *GetBranchReport) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *GetBranchReport) GetAdminPanelOrdersCount() int64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *GetBranchReport) GetAppOrdersCount() int64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *GetBranchReport) GetBotOrdersCount() int64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *GetBranchReport) GetWebsiteOrdersCount() int64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *GetBranchReport) GetAggregator() int64 {
	if x != nil {
		return x.Aggregator
	}
	return 0
}

func (x *GetBranchReport) GetTotalOrdersCount() int64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *GetBranchReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *GetBranchReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *GetBranchReport) GetCashSum() float32 {
	if x != nil {
		return x.CashSum
	}
	return 0
}

func (x *GetBranchReport) GetCashDeliverySum() float32 {
	if x != nil {
		return x.CashDeliverySum
	}
	return 0
}

func (x *GetBranchReport) GetPaymeSum() float32 {
	if x != nil {
		return x.PaymeSum
	}
	return 0
}

func (x *GetBranchReport) GetPaymeDeliverySum() float32 {
	if x != nil {
		return x.PaymeDeliverySum
	}
	return 0
}

func (x *GetBranchReport) GetTransferSum() float32 {
	if x != nil {
		return x.TransferSum
	}
	return 0
}

func (x *GetBranchReport) GetTransferDeliverySum() float32 {
	if x != nil {
		return x.TransferDeliverySum
	}
	return 0
}

func (x *GetBranchReport) GetClickSum() float32 {
	if x != nil {
		return x.ClickSum
	}
	return 0
}

func (x *GetBranchReport) GetClickDeliverySum() float32 {
	if x != nil {
		return x.ClickDeliverySum
	}
	return 0
}

func (x *GetBranchReport) GetAverageSum() float32 {
	if x != nil {
		return x.AverageSum
	}
	return 0
}

func (x *GetBranchReport) GetFreeDelivery() float32 {
	if x != nil {
		return x.FreeDelivery
	}
	return 0
}

func (x *GetBranchReport) GetGivenCashBack() float32 {
	if x != nil {
		return x.GivenCashBack
	}
	return 0
}

type BranchReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*GetBranchReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *BranchReportResponse) Reset() {
	*x = BranchReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchReportResponse) ProtoMessage() {}

func (x *BranchReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchReportResponse.ProtoReflect.Descriptor instead.
func (*BranchReportResponse) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{7}
}

func (x *BranchReportResponse) GetReports() []*GetBranchReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

type OrderReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalOrderId            uint64  `protobuf:"varint,2,opt,name=external_order_id,json=externalOrderId,proto3" json:"external_order_id,omitempty"`
	BranchName                 string  `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	OperatorName               string  `protobuf:"bytes,4,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty"`
	ClientName                 string  `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	CourierName                string  `protobuf:"bytes,6,opt,name=courier_name,json=courierName,proto3" json:"courier_name,omitempty"`
	AggregatorName             string  `protobuf:"bytes,7,opt,name=aggregator_name,json=aggregatorName,proto3" json:"aggregator_name,omitempty"`
	ToAddress                  string  `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	DeliveryPrice              float32 `protobuf:"fixed32,9,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	OrderAmount                float32 `protobuf:"fixed32,10,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	PaymentType                string  `protobuf:"bytes,11,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	Source                     string  `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	Paid                       bool    `protobuf:"varint,13,opt,name=paid,proto3" json:"paid,omitempty"`
	DeliveryType               string  `protobuf:"bytes,14,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	CreatedAt                  string  `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OperatorAcceptedTime       string  `protobuf:"bytes,16,opt,name=operator_accepted_time,json=operatorAcceptedTime,proto3" json:"operator_accepted_time,omitempty"`
	OperatorAcceptedTimeAmount string  `protobuf:"bytes,17,opt,name=operator_accepted_time_amount,json=operatorAcceptedTimeAmount,proto3" json:"operator_accepted_time_amount,omitempty"`
	VendorReadyTime            string  `protobuf:"bytes,18,opt,name=vendor_ready_time,json=vendorReadyTime,proto3" json:"vendor_ready_time,omitempty"`
	VendorReadyTimeAmount      string  `protobuf:"bytes,19,opt,name=vendor_ready_time_amount,json=vendorReadyTimeAmount,proto3" json:"vendor_ready_time_amount,omitempty"`
	CourierDeliveredTime       string  `protobuf:"bytes,20,opt,name=courier_delivered_time,json=courierDeliveredTime,proto3" json:"courier_delivered_time,omitempty"`
	CourierDeliveredTimeAmount string  `protobuf:"bytes,21,opt,name=courier_delivered_time_amount,json=courierDeliveredTimeAmount,proto3" json:"courier_delivered_time_amount,omitempty"`
	FinishedAt                 string  `protobuf:"bytes,22,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	TotalTime                  string  `protobuf:"bytes,23,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
}

func (x *OrderReport) Reset() {
	*x = OrderReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReport) ProtoMessage() {}

func (x *OrderReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReport.ProtoReflect.Descriptor instead.
func (*OrderReport) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{8}
}

func (x *OrderReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderReport) GetExternalOrderId() uint64 {
	if x != nil {
		return x.ExternalOrderId
	}
	return 0
}

func (x *OrderReport) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *OrderReport) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *OrderReport) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *OrderReport) GetCourierName() string {
	if x != nil {
		return x.CourierName
	}
	return ""
}

func (x *OrderReport) GetAggregatorName() string {
	if x != nil {
		return x.AggregatorName
	}
	return ""
}

func (x *OrderReport) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *OrderReport) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *OrderReport) GetOrderAmount() float32 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *OrderReport) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *OrderReport) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OrderReport) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *OrderReport) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

func (x *OrderReport) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderReport) GetOperatorAcceptedTime() string {
	if x != nil {
		return x.OperatorAcceptedTime
	}
	return ""
}

func (x *OrderReport) GetOperatorAcceptedTimeAmount() string {
	if x != nil {
		return x.OperatorAcceptedTimeAmount
	}
	return ""
}

func (x *OrderReport) GetVendorReadyTime() string {
	if x != nil {
		return x.VendorReadyTime
	}
	return ""
}

func (x *OrderReport) GetVendorReadyTimeAmount() string {
	if x != nil {
		return x.VendorReadyTimeAmount
	}
	return ""
}

func (x *OrderReport) GetCourierDeliveredTime() string {
	if x != nil {
		return x.CourierDeliveredTime
	}
	return ""
}

func (x *OrderReport) GetCourierDeliveredTimeAmount() string {
	if x != nil {
		return x.CourierDeliveredTimeAmount
	}
	return ""
}

func (x *OrderReport) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *OrderReport) GetTotalTime() string {
	if x != nil {
		return x.TotalTime
	}
	return ""
}

type OrderReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*OrderReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Count   int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OrderReportResponse) Reset() {
	*x = OrderReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReportResponse) ProtoMessage() {}

func (x *OrderReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReportResponse.ProtoReflect.Descriptor instead.
func (*OrderReportResponse) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{9}
}

func (x *OrderReportResponse) GetReports() []*OrderReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *OrderReportResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BranchOrderTimeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId           string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	BranchName         string `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	TotalCount         int64  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Under_35           int64  `protobuf:"varint,4,opt,name=under_35,json=under35,proto3" json:"under_35,omitempty"`
	PercentUnder_35    int64  `protobuf:"varint,5,opt,name=percent_under_35,json=percentUnder35,proto3" json:"percent_under_35,omitempty"`
	Range_35_60        int64  `protobuf:"varint,6,opt,name=range_35_60,json=range3560,proto3" json:"range_35_60,omitempty"`
	PercentRange_35_60 int64  `protobuf:"varint,7,opt,name=percent_range_35_60,json=percentRange3560,proto3" json:"percent_range_35_60,omitempty"`
	Over_60            int64  `protobuf:"varint,8,opt,name=over_60,json=over60,proto3" json:"over_60,omitempty"`
	PercentOver_60     int64  `protobuf:"varint,9,opt,name=percent_over_60,json=percentOver60,proto3" json:"percent_over_60,omitempty"`
}

func (x *BranchOrderTimeReport) Reset() {
	*x = BranchOrderTimeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchOrderTimeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchOrderTimeReport) ProtoMessage() {}

func (x *BranchOrderTimeReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchOrderTimeReport.ProtoReflect.Descriptor instead.
func (*BranchOrderTimeReport) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{10}
}

func (x *BranchOrderTimeReport) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *BranchOrderTimeReport) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *BranchOrderTimeReport) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *BranchOrderTimeReport) GetUnder_35() int64 {
	if x != nil {
		return x.Under_35
	}
	return 0
}

func (x *BranchOrderTimeReport) GetPercentUnder_35() int64 {
	if x != nil {
		return x.PercentUnder_35
	}
	return 0
}

func (x *BranchOrderTimeReport) GetRange_35_60() int64 {
	if x != nil {
		return x.Range_35_60
	}
	return 0
}

func (x *BranchOrderTimeReport) GetPercentRange_35_60() int64 {
	if x != nil {
		return x.PercentRange_35_60
	}
	return 0
}

func (x *BranchOrderTimeReport) GetOver_60() int64 {
	if x != nil {
		return x.Over_60
	}
	return 0
}

func (x *BranchOrderTimeReport) GetPercentOver_60() int64 {
	if x != nil {
		return x.PercentOver_60
	}
	return 0
}

type BranchOrderTimeReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*BranchOrderTimeReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *BranchOrderTimeReportResponse) Reset() {
	*x = BranchOrderTimeReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchOrderTimeReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchOrderTimeReportResponse) ProtoMessage() {}

func (x *BranchOrderTimeReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchOrderTimeReportResponse.ProtoReflect.Descriptor instead.
func (*BranchOrderTimeReportResponse) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{11}
}

func (x *BranchOrderTimeReportResponse) GetReports() []*BranchOrderTimeReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ClientOrderReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinetId     string `protobuf:"bytes,1,opt,name=clinet_id,json=clinetId,proto3" json:"clinet_id,omitempty"`
	ClientName   string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClinetPhone  string `protobuf:"bytes,3,opt,name=clinet_phone,json=clinetPhone,proto3" json:"clinet_phone,omitempty"`
	DateOfBirth  string `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	CreatedAt    string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Platform     string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	ClientTypeId string `protobuf:"bytes,7,opt,name=client_type_id,json=clientTypeId,proto3" json:"client_type_id,omitempty"`
	ClientType   string `protobuf:"bytes,8,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	OrderCount   int64  `protobuf:"varint,9,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	AvgSum       int64  `protobuf:"varint,10,opt,name=avg_sum,json=avgSum,proto3" json:"avg_sum,omitempty"`
	MaxSum       int64  `protobuf:"varint,11,opt,name=max_sum,json=maxSum,proto3" json:"max_sum,omitempty"`
	MinSum       int64  `protobuf:"varint,12,opt,name=min_sum,json=minSum,proto3" json:"min_sum,omitempty"`
	TotalSum     int64  `protobuf:"varint,13,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
}

func (x *ClientOrderReport) Reset() {
	*x = ClientOrderReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientOrderReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientOrderReport) ProtoMessage() {}

func (x *ClientOrderReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientOrderReport.ProtoReflect.Descriptor instead.
func (*ClientOrderReport) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{12}
}

func (x *ClientOrderReport) GetClinetId() string {
	if x != nil {
		return x.ClinetId
	}
	return ""
}

func (x *ClientOrderReport) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *ClientOrderReport) GetClinetPhone() string {
	if x != nil {
		return x.ClinetPhone
	}
	return ""
}

func (x *ClientOrderReport) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *ClientOrderReport) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ClientOrderReport) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ClientOrderReport) GetClientTypeId() string {
	if x != nil {
		return x.ClientTypeId
	}
	return ""
}

func (x *ClientOrderReport) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *ClientOrderReport) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *ClientOrderReport) GetAvgSum() int64 {
	if x != nil {
		return x.AvgSum
	}
	return 0
}

func (x *ClientOrderReport) GetMaxSum() int64 {
	if x != nil {
		return x.MaxSum
	}
	return 0
}

func (x *ClientOrderReport) GetMinSum() int64 {
	if x != nil {
		return x.MinSum
	}
	return 0
}

func (x *ClientOrderReport) GetTotalSum() int64 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

type ClientOrderReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*ClientOrderReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *ClientOrderReportResponse) Reset() {
	*x = ClientOrderReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_report_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientOrderReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientOrderReportResponse) ProtoMessage() {}

func (x *ClientOrderReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_report_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientOrderReportResponse.ProtoReflect.Descriptor instead.
func (*ClientOrderReportResponse) Descriptor() ([]byte, []int) {
	return file_order_report_proto_rawDescGZIP(), []int{13}
}

func (x *ClientOrderReportResponse) GetReports() []*ClientOrderReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

var File_order_report_proto protoreflect.FileDescriptor

var file_order_report_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x11,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x03, 0x0a,
	0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x62, 0x75, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x12, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0xfd, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x76, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x76, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0xc9, 0x06, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x62, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63,
	0x61, 0x73, 0x68, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x75,
	0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x4b, 0x0a,
	0x14, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x8f, 0x07, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x15, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x33, 0x35, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x33, 0x35, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x33, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x33, 0x35, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x33, 0x35, 0x5f, 0x36, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x33, 0x35, 0x36, 0x30, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x33, 0x35, 0x5f, 0x36, 0x30, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x33, 0x35, 0x36, 0x30, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x36, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x36, 0x30,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x36, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x30, 0x22, 0x5a, 0x0a, 0x1d, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x53, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x18,
	0x5a, 0x16, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_report_proto_rawDescOnce sync.Once
	file_order_report_proto_rawDescData = file_order_report_proto_rawDesc
)

func file_order_report_proto_rawDescGZIP() []byte {
	file_order_report_proto_rawDescOnce.Do(func() {
		file_order_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_report_proto_rawDescData)
	})
	return file_order_report_proto_rawDescData
}

var file_order_report_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_order_report_proto_goTypes = []interface{}{
	(*MainReportRequest)(nil),             // 0: genproto.MainReportRequest
	(*MainReport)(nil),                    // 1: genproto.MainReport
	(*MainReportResponse)(nil),            // 2: genproto.MainReportResponse
	(*CourierReportRequest)(nil),          // 3: genproto.CourierReportRequest
	(*CourierReports)(nil),                // 4: genproto.CourierReports
	(*CourierReportRespose)(nil),          // 5: genproto.CourierReportRespose
	(*GetBranchReport)(nil),               // 6: genproto.GetBranchReport
	(*BranchReportResponse)(nil),          // 7: genproto.BranchReportResponse
	(*OrderReport)(nil),                   // 8: genproto.OrderReport
	(*OrderReportResponse)(nil),           // 9: genproto.OrderReportResponse
	(*BranchOrderTimeReport)(nil),         // 10: genproto.BranchOrderTimeReport
	(*BranchOrderTimeReportResponse)(nil), // 11: genproto.BranchOrderTimeReportResponse
	(*ClientOrderReport)(nil),             // 12: genproto.ClientOrderReport
	(*ClientOrderReportResponse)(nil),     // 13: genproto.ClientOrderReportResponse
	(*Courier)(nil),                       // 14: genproto.Courier
}
var file_order_report_proto_depIdxs = []int32{
	1,  // 0: genproto.MainReportResponse.reports:type_name -> genproto.MainReport
	14, // 1: genproto.CourierReports.courier:type_name -> genproto.Courier
	4,  // 2: genproto.CourierReportRespose.reports:type_name -> genproto.CourierReports
	6,  // 3: genproto.BranchReportResponse.reports:type_name -> genproto.GetBranchReport
	8,  // 4: genproto.OrderReportResponse.reports:type_name -> genproto.OrderReport
	10, // 5: genproto.BranchOrderTimeReportResponse.reports:type_name -> genproto.BranchOrderTimeReport
	12, // 6: genproto.ClientOrderReportResponse.reports:type_name -> genproto.ClientOrderReport
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_order_report_proto_init() }
func file_order_report_proto_init() {
	if File_order_report_proto != nil {
		return
	}
	file_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_order_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierReportRespose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchOrderTimeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchOrderTimeReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientOrderReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_report_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientOrderReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_report_proto_goTypes,
		DependencyIndexes: file_order_report_proto_depIdxs,
		MessageInfos:      file_order_report_proto_msgTypes,
	}.Build()
	File_order_report_proto = out.File
	file_order_report_proto_rawDesc = nil
	file_order_report_proto_goTypes = nil
	file_order_report_proto_depIdxs = nil
}
