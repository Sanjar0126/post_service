// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: geo_service.proto

package geo_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeozoneId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GeozoneId) Reset() {
	*x = GeozoneId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geo_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeozoneId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeozoneId) ProtoMessage() {}

func (x *GeozoneId) ProtoReflect() protoreflect.Message {
	mi := &file_geo_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeozoneId.ProtoReflect.Descriptor instead.
func (*GeozoneId) Descriptor() ([]byte, []int) {
	return file_geo_service_proto_rawDescGZIP(), []int{0}
}

func (x *GeozoneId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAllGeozonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	ShipperId string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetAllGeozonesRequest) Reset() {
	*x = GetAllGeozonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geo_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGeozonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGeozonesRequest) ProtoMessage() {}

func (x *GetAllGeozonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geo_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGeozonesRequest.ProtoReflect.Descriptor instead.
func (*GetAllGeozonesRequest) Descriptor() ([]byte, []int) {
	return file_geo_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllGeozonesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllGeozonesRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllGeozonesRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetAllGeozonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geozones []*Geozone `protobuf:"bytes,1,rep,name=geozones,proto3" json:"geozones,omitempty"`
	Count    uint64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllGeozonesResponse) Reset() {
	*x = GetAllGeozonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geo_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGeozonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGeozonesResponse) ProtoMessage() {}

func (x *GetAllGeozonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geo_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGeozonesResponse.ProtoReflect.Descriptor instead.
func (*GetAllGeozonesResponse) Descriptor() ([]byte, []int) {
	return file_geo_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllGeozonesResponse) GetGeozones() []*Geozone {
	if x != nil {
		return x.Geozones
	}
	return nil
}

func (x *GetAllGeozonesResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_geo_service_proto protoreflect.FileDescriptor

var file_geo_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x67,
	0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x67, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x90, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x1a,
	0x13, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_geo_service_proto_rawDescOnce sync.Once
	file_geo_service_proto_rawDescData = file_geo_service_proto_rawDesc
)

func file_geo_service_proto_rawDescGZIP() []byte {
	file_geo_service_proto_rawDescOnce.Do(func() {
		file_geo_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_geo_service_proto_rawDescData)
	})
	return file_geo_service_proto_rawDescData
}

var file_geo_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_geo_service_proto_goTypes = []interface{}{
	(*GeozoneId)(nil),                 // 0: genproto.GeozoneId
	(*GetAllGeozonesRequest)(nil),     // 1: genproto.GetAllGeozonesRequest
	(*GetAllGeozonesResponse)(nil),    // 2: genproto.GetAllGeozonesResponse
	(*Geozone)(nil),                   // 3: genproto.Geozone
	(*CheckPointGeozoneRequest)(nil),  // 4: genproto.CheckPointGeozoneRequest
	(*empty.Empty)(nil),               // 5: google.protobuf.Empty
	(*CheckPointGeozoneResponse)(nil), // 6: genproto.CheckPointGeozoneResponse
}
var file_geo_service_proto_depIdxs = []int32{
	3, // 0: genproto.GetAllGeozonesResponse.geozones:type_name -> genproto.Geozone
	3, // 1: genproto.GeoService.Create:input_type -> genproto.Geozone
	3, // 2: genproto.GeoService.Update:input_type -> genproto.Geozone
	0, // 3: genproto.GeoService.Get:input_type -> genproto.GeozoneId
	1, // 4: genproto.GeoService.GetAll:input_type -> genproto.GetAllGeozonesRequest
	0, // 5: genproto.GeoService.Delete:input_type -> genproto.GeozoneId
	4, // 6: genproto.GeoService.CheckPointGeozone:input_type -> genproto.CheckPointGeozoneRequest
	0, // 7: genproto.GeoService.Create:output_type -> genproto.GeozoneId
	5, // 8: genproto.GeoService.Update:output_type -> google.protobuf.Empty
	3, // 9: genproto.GeoService.Get:output_type -> genproto.Geozone
	2, // 10: genproto.GeoService.GetAll:output_type -> genproto.GetAllGeozonesResponse
	5, // 11: genproto.GeoService.Delete:output_type -> google.protobuf.Empty
	6, // 12: genproto.GeoService.CheckPointGeozone:output_type -> genproto.CheckPointGeozoneResponse
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_geo_service_proto_init() }
func file_geo_service_proto_init() {
	if File_geo_service_proto != nil {
		return
	}
	file_geo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_geo_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeozoneId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geo_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGeozonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geo_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGeozonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_geo_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_geo_service_proto_goTypes,
		DependencyIndexes: file_geo_service_proto_depIdxs,
		MessageInfos:      file_geo_service_proto_msgTypes,
	}.Build()
	File_geo_service_proto = out.File
	file_geo_service_proto_rawDesc = nil
	file_geo_service_proto_goTypes = nil
	file_geo_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeoServiceClient is the client API for GeoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoServiceClient interface {
	Create(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*GeozoneId, error)
	Update(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*Geozone, error)
	GetAll(ctx context.Context, in *GetAllGeozonesRequest, opts ...grpc.CallOption) (*GetAllGeozonesResponse, error)
	Delete(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckPointGeozone(ctx context.Context, in *CheckPointGeozoneRequest, opts ...grpc.CallOption) (*CheckPointGeozoneResponse, error)
}

type geoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoServiceClient(cc grpc.ClientConnInterface) GeoServiceClient {
	return &geoServiceClient{cc}
}

func (c *geoServiceClient) Create(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*GeozoneId, error) {
	out := new(GeozoneId)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Update(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Get(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*Geozone, error) {
	out := new(Geozone)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) GetAll(ctx context.Context, in *GetAllGeozonesRequest, opts ...grpc.CallOption) (*GetAllGeozonesResponse, error) {
	out := new(GetAllGeozonesResponse)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Delete(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) CheckPointGeozone(ctx context.Context, in *CheckPointGeozoneRequest, opts ...grpc.CallOption) (*CheckPointGeozoneResponse, error) {
	out := new(CheckPointGeozoneResponse)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/CheckPointGeozone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServiceServer is the server API for GeoService service.
type GeoServiceServer interface {
	Create(context.Context, *Geozone) (*GeozoneId, error)
	Update(context.Context, *Geozone) (*empty.Empty, error)
	Get(context.Context, *GeozoneId) (*Geozone, error)
	GetAll(context.Context, *GetAllGeozonesRequest) (*GetAllGeozonesResponse, error)
	Delete(context.Context, *GeozoneId) (*empty.Empty, error)
	CheckPointGeozone(context.Context, *CheckPointGeozoneRequest) (*CheckPointGeozoneResponse, error)
}

// UnimplementedGeoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeoServiceServer struct {
}

func (*UnimplementedGeoServiceServer) Create(context.Context, *Geozone) (*GeozoneId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGeoServiceServer) Update(context.Context, *Geozone) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGeoServiceServer) Get(context.Context, *GeozoneId) (*Geozone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGeoServiceServer) GetAll(context.Context, *GetAllGeozonesRequest) (*GetAllGeozonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedGeoServiceServer) Delete(context.Context, *GeozoneId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGeoServiceServer) CheckPointGeozone(context.Context, *CheckPointGeozoneRequest) (*CheckPointGeozoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPointGeozone not implemented")
}

func RegisterGeoServiceServer(s *grpc.Server, srv GeoServiceServer) {
	s.RegisterService(&_GeoService_serviceDesc, srv)
}

func _GeoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geozone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Create(ctx, req.(*Geozone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geozone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Update(ctx, req.(*Geozone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeozoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Get(ctx, req.(*GeozoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGeozonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).GetAll(ctx, req.(*GetAllGeozonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeozoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Delete(ctx, req.(*GeozoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_CheckPointGeozone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPointGeozoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).CheckPointGeozone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/CheckPointGeozone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).CheckPointGeozone(ctx, req.(*CheckPointGeozoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GeoService",
	HandlerType: (*GeoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeoService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeoService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GeoService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GeoService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeoService_Delete_Handler,
		},
		{
			MethodName: "CheckPointGeozone",
			Handler:    _GeoService_CheckPointGeozone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo_service.proto",
}
