// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: report.proto

package report_service_v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShipperReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount         uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount    uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount           uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount           uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount       uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum                 float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash             float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick            float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme            float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum         float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	TotalSumPaymePaid        float32 `protobuf:"fixed32,12,opt,name=total_sum_payme_paid,json=totalSumPaymePaid,proto3" json:"total_sum_payme_paid,omitempty"`
	TotalSumClickPaid        float32 `protobuf:"fixed32,13,opt,name=total_sum_click_paid,json=totalSumClickPaid,proto3" json:"total_sum_click_paid,omitempty"`
	TotalCashDeliverySum     float32 `protobuf:"fixed32,14,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum    float32 `protobuf:"fixed32,15,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum    float32 `protobuf:"fixed32,16,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	TotalSumTransfer         float32 `protobuf:"fixed32,17,opt,name=total_sum_transfer,json=totalSumTransfer,proto3" json:"total_sum_transfer,omitempty"`
	TotalTransferDeliverySum float32 `protobuf:"fixed32,18,opt,name=total_transfer_delivery_sum,json=totalTransferDeliverySum,proto3" json:"total_transfer_delivery_sum,omitempty"`
}

func (x *ShipperReport) Reset() {
	*x = ShipperReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipperReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipperReport) ProtoMessage() {}

func (x *ShipperReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipperReport.ProtoReflect.Descriptor instead.
func (*ShipperReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{0}
}

func (x *ShipperReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShipperReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *ShipperReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *ShipperReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *ShipperReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumPaymePaid() float32 {
	if x != nil {
		return x.TotalSumPaymePaid
	}
	return 0
}

func (x *ShipperReport) GetTotalSumClickPaid() float32 {
	if x != nil {
		return x.TotalSumClickPaid
	}
	return 0
}

func (x *ShipperReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumTransfer() float32 {
	if x != nil {
		return x.TotalSumTransfer
	}
	return 0
}

func (x *ShipperReport) GetTotalTransferDeliverySum() float32 {
	if x != nil {
		return x.TotalTransferDeliverySum
	}
	return 0
}

type OperatorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount      uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount        uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount        uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount    uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum              float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash          float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick         float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme         float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum      float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
}

func (x *OperatorReport) Reset() {
	*x = OperatorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorReport) ProtoMessage() {}

func (x *OperatorReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorReport.ProtoReflect.Descriptor instead.
func (*OperatorReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatorReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *OperatorReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *OperatorReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *OperatorReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *OperatorReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

type BranchReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount         uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount    uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount           uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount           uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount       uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum                 float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash             float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick            float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme            float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum         float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	Date                     string  `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	TotalSumPaymePaid        float32 `protobuf:"fixed32,13,opt,name=total_sum_payme_paid,json=totalSumPaymePaid,proto3" json:"total_sum_payme_paid,omitempty"`
	TotalSumClickPaid        float32 `protobuf:"fixed32,14,opt,name=total_sum_click_paid,json=totalSumClickPaid,proto3" json:"total_sum_click_paid,omitempty"`
	TotalCashDeliverySum     float32 `protobuf:"fixed32,15,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum    float32 `protobuf:"fixed32,16,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum    float32 `protobuf:"fixed32,17,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	TotalSumTransfer         float32 `protobuf:"fixed32,18,opt,name=total_sum_transfer,json=totalSumTransfer,proto3" json:"total_sum_transfer,omitempty"`
	TotalTransferDeliverySum float32 `protobuf:"fixed32,19,opt,name=total_transfer_delivery_sum,json=totalTransferDeliverySum,proto3" json:"total_transfer_delivery_sum,omitempty"`
}

func (x *BranchReport) Reset() {
	*x = BranchReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchReport) ProtoMessage() {}

func (x *BranchReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchReport.ProtoReflect.Descriptor instead.
func (*BranchReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{2}
}

func (x *BranchReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *BranchReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *BranchReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *BranchReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *BranchReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *BranchReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *BranchReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *BranchReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *BranchReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *BranchReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *BranchReport) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *BranchReport) GetTotalSumPaymePaid() float32 {
	if x != nil {
		return x.TotalSumPaymePaid
	}
	return 0
}

func (x *BranchReport) GetTotalSumClickPaid() float32 {
	if x != nil {
		return x.TotalSumClickPaid
	}
	return 0
}

func (x *BranchReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalSumTransfer() float32 {
	if x != nil {
		return x.TotalSumTransfer
	}
	return 0
}

func (x *BranchReport) GetTotalTransferDeliverySum() float32 {
	if x != nil {
		return x.TotalTransferDeliverySum
	}
	return 0
}

type ProductReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName        string  `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	TotalProductsCount uint64  `protobuf:"varint,2,opt,name=total_products_count,json=totalProductsCount,proto3" json:"total_products_count,omitempty"`
	TotalSum           float32 `protobuf:"fixed32,3,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
}

func (x *ProductReport) Reset() {
	*x = ProductReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductReport) ProtoMessage() {}

func (x *ProductReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductReport.ProtoReflect.Descriptor instead.
func (*ProductReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{3}
}

func (x *ProductReport) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductReport) GetTotalProductsCount() uint64 {
	if x != nil {
		return x.TotalProductsCount
	}
	return 0
}

func (x *ProductReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

type CourierReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourierName           string  `protobuf:"bytes,1,opt,name=courier_name,json=courierName,proto3" json:"courier_name,omitempty"`
	TotalOrdersCount      uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	TotalSum              float32 `protobuf:"fixed32,3,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash          float32 `protobuf:"fixed32,4,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick         float32 `protobuf:"fixed32,5,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme         float32 `protobuf:"fixed32,6,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum      float32 `protobuf:"fixed32,7,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	TotalCashDeliverySum  float32 `protobuf:"fixed32,8,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum float32 `protobuf:"fixed32,9,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum float32 `protobuf:"fixed32,10,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	Date                  string  `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CourierReport) Reset() {
	*x = CourierReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierReport) ProtoMessage() {}

func (x *CourierReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierReport.ProtoReflect.Descriptor instead.
func (*CourierReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{4}
}

func (x *CourierReport) GetCourierName() string {
	if x != nil {
		return x.CourierName
	}
	return ""
}

func (x *CourierReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *CourierReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *CourierReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *CourierReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *CourierReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *CourierReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *CourierReport) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MonthlyOrdersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day         uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	OrdersCount uint32 `protobuf:"varint,2,opt,name=orders_count,json=ordersCount,proto3" json:"orders_count,omitempty"`
}

func (x *MonthlyOrdersReport) Reset() {
	*x = MonthlyOrdersReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyOrdersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyOrdersReport) ProtoMessage() {}

func (x *MonthlyOrdersReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyOrdersReport.ProtoReflect.Descriptor instead.
func (*MonthlyOrdersReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{5}
}

func (x *MonthlyOrdersReport) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *MonthlyOrdersReport) GetOrdersCount() uint32 {
	if x != nil {
		return x.OrdersCount
	}
	return 0
}

type YearlyOrdersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	OrdersCount uint32 `protobuf:"varint,2,opt,name=orders_count,json=ordersCount,proto3" json:"orders_count,omitempty"`
}

func (x *YearlyOrdersReport) Reset() {
	*x = YearlyOrdersReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearlyOrdersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearlyOrdersReport) ProtoMessage() {}

func (x *YearlyOrdersReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearlyOrdersReport.ProtoReflect.Descriptor instead.
func (*YearlyOrdersReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{6}
}

func (x *YearlyOrdersReport) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *YearlyOrdersReport) GetOrdersCount() uint32 {
	if x != nil {
		return x.OrdersCount
	}
	return 0
}

type StatusTimeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTimeAvg         string `protobuf:"bytes,1,opt,name=total_time_avg,json=totalTimeAvg,proto3" json:"total_time_avg,omitempty"`
	OperatorAcceptingAvg string `protobuf:"bytes,2,opt,name=operator_accepting_avg,json=operatorAcceptingAvg,proto3" json:"operator_accepting_avg,omitempty"`
	VendorPreparingAvg   string `protobuf:"bytes,3,opt,name=vendor_preparing_avg,json=vendorPreparingAvg,proto3" json:"vendor_preparing_avg,omitempty"`
	CourierPickingAvg    string `protobuf:"bytes,4,opt,name=courier_picking_avg,json=courierPickingAvg,proto3" json:"courier_picking_avg,omitempty"`
	DeliveringTimeAvg    string `protobuf:"bytes,5,opt,name=delivering_time_avg,json=deliveringTimeAvg,proto3" json:"delivering_time_avg,omitempty"`
}

func (x *StatusTimeReport) Reset() {
	*x = StatusTimeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusTimeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusTimeReport) ProtoMessage() {}

func (x *StatusTimeReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusTimeReport.ProtoReflect.Descriptor instead.
func (*StatusTimeReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{7}
}

func (x *StatusTimeReport) GetTotalTimeAvg() string {
	if x != nil {
		return x.TotalTimeAvg
	}
	return ""
}

func (x *StatusTimeReport) GetOperatorAcceptingAvg() string {
	if x != nil {
		return x.OperatorAcceptingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetVendorPreparingAvg() string {
	if x != nil {
		return x.VendorPreparingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetCourierPickingAvg() string {
	if x != nil {
		return x.CourierPickingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetDeliveringTimeAvg() string {
	if x != nil {
		return x.DeliveringTimeAvg
	}
	return ""
}

type BranchTimeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchName  string `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Under_30    int32  `protobuf:"varint,2,opt,name=under_30,json=under30,proto3" json:"under_30,omitempty"`
	Range_30_40 int32  `protobuf:"varint,3,opt,name=range_30_40,json=range3040,proto3" json:"range_30_40,omitempty"`
	Range_40_60 int32  `protobuf:"varint,4,opt,name=range_40_60,json=range4060,proto3" json:"range_40_60,omitempty"`
	Over_60     int32  `protobuf:"varint,5,opt,name=over_60,json=over60,proto3" json:"over_60,omitempty"`
}

func (x *BranchTimeReport) Reset() {
	*x = BranchTimeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchTimeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchTimeReport) ProtoMessage() {}

func (x *BranchTimeReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchTimeReport.ProtoReflect.Descriptor instead.
func (*BranchTimeReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{8}
}

func (x *BranchTimeReport) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *BranchTimeReport) GetUnder_30() int32 {
	if x != nil {
		return x.Under_30
	}
	return 0
}

func (x *BranchTimeReport) GetRange_30_40() int32 {
	if x != nil {
		return x.Range_30_40
	}
	return 0
}

func (x *BranchTimeReport) GetRange_40_60() int32 {
	if x != nil {
		return x.Range_40_60
	}
	return 0
}

func (x *BranchTimeReport) GetOver_60() int32 {
	if x != nil {
		return x.Over_60
	}
	return 0
}

var File_report_proto protoreflect.FileDescriptor

var file_report_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x06, 0x0a, 0x0d, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37,
	0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x6d, 0x22, 0xd2, 0x03, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x22, 0xdc, 0x06, 0x0a, 0x0c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x61,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x22, 0xde, 0x03, 0x0a,
	0x0d, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61,
	0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x76, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x22, 0xa7, 0x01, 0x0a, 0x10,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x33, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x33, 0x30, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x33, 0x30, 0x5f, 0x34, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x30, 0x34, 0x30, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x34, 0x30, 0x5f, 0x36, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x34, 0x30, 0x36, 0x30, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x36, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x76, 0x65, 0x72, 0x36, 0x30, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_report_proto_rawDescOnce sync.Once
	file_report_proto_rawDescData = file_report_proto_rawDesc
)

func file_report_proto_rawDescGZIP() []byte {
	file_report_proto_rawDescOnce.Do(func() {
		file_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_report_proto_rawDescData)
	})
	return file_report_proto_rawDescData
}

var file_report_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_report_proto_goTypes = []interface{}{
	(*ShipperReport)(nil),       // 0: genproto.ShipperReport
	(*OperatorReport)(nil),      // 1: genproto.OperatorReport
	(*BranchReport)(nil),        // 2: genproto.BranchReport
	(*ProductReport)(nil),       // 3: genproto.ProductReport
	(*CourierReport)(nil),       // 4: genproto.CourierReport
	(*MonthlyOrdersReport)(nil), // 5: genproto.MonthlyOrdersReport
	(*YearlyOrdersReport)(nil),  // 6: genproto.YearlyOrdersReport
	(*StatusTimeReport)(nil),    // 7: genproto.StatusTimeReport
	(*BranchTimeReport)(nil),    // 8: genproto.BranchTimeReport
}
var file_report_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_report_proto_init() }
func file_report_proto_init() {
	if File_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipperReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyOrdersReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YearlyOrdersReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusTimeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchTimeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_report_proto_goTypes,
		DependencyIndexes: file_report_proto_depIdxs,
		MessageInfos:      file_report_proto_msgTypes,
	}.Build()
	File_report_proto = out.File
	file_report_proto_rawDesc = nil
	file_report_proto_goTypes = nil
	file_report_proto_depIdxs = nil
}
